# -*- coding: utf-8 -*-
"""patient_data_exploration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jMD1rsNCdQZUAWy3Z_d1YWUrbVlIJenI
"""

import pandas as pd
import numpy as np
from google.colab import files
uploaded = files.upload()

# importing patient_1 activity data
activity = pd.read_csv('patient_1_activity.csv')
activity.head()

# statistics for the data
activity.describe()

activity.columns

activity2 = pd.read_csv('patient_2_activity.csv')
activity2.head()

"""# New Section"""

# visualising number of steps

activity_steps = activity[["steps", "summary_date"]]
activity_steps["month"] = activity["summary_date"].apply(lambda x: int(x[5:7]))
steps = activity_steps.groupby("month").mean()

plt.bar(steps.index, steps["steps"])

#comparing rest, activity, and inactivity
import matplotlib.pyplot as plt

activity_features = activity[["low", "medium", "high", "summary_date", "rest", "inactive"]]
activity_features["month"] = activity["summary_date"].apply(lambda x: int(x[5:7]))
new = activity_features.groupby("month").mean()

month = np.array(new.index)
low = new["low"]
medium = new["medium"]
high = new["high"]
rest = new["rest"]
inactive = new["inactive"]

plt.plot(month, low)
plt.plot(month, medium)
plt.plot(month, high)
plt.plot(month, rest)
plt.plot(month, inactive)

plt.legend(['low', 'medium', 'high', "rest", "inactive"], loc='upper right')
plt.show()


activity_features2 = activity2[["low", "medium", "high", "summary_date", "rest", "inactive"]]
activity_features2["month"] = activity2["summary_date"].apply(lambda x: int(x[5:7]))
new2 = activity_features2.groupby("month").mean()

month2 = np.array(new2.index)
low2 = new2["low"]
medium2 = new2["medium"]
high2 = new2["high"]
rest2 = new2["rest"]
inactive2 = new2["inactive"]

plt.plot(month2, low2)
plt.plot(month2, medium2)
plt.plot(month2, high2)
plt.plot(month2, rest2)
plt.plot(month2, inactive2)

plt.legend(['low', 'medium', 'high', "rest", "inactive"], loc='upper right')
plt.show()





activity["summary_date"]

activity['score'].hist()

list(activity['summary_date'])[0] # first date tracked

list(activity['summary_date'])[-1] # last date tracked

"""Plotting data with time component:
https://python-graph-gallery.com/basic-time-series-with-matplotlib/#:~:text=A%20basic%20time%20series%20plot,that%20Matplotlib%20recognizes%20as%20such.


https://towardsdatascience.com/6-visualization-tricks-to-handle-ultra-long-time-series-data-57dad97e0fc2#:~:text=Even%20though%20long%20time%2Dseries,the%20result%20can%20be%20messy.
"""

activity['class_5min']

activity.shape

#Helpful Variable Information: https://cloud.ouraring.com/docs/sleep

#patient_1_sleep.csv
import csv
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder

patient_1_sleep = 'patient_1_sleep.csv'
data = pd.read_csv(patient_1_sleep)

#duration: Total duration of the sleep period (sleep.duration = sleep.bedtime_end - sleep.bedtime_start).
x_col = 'summary_date'
column_duration = 'duration'
plt.figure(figsize=(12, 12))
plt.scatter(data[x_col], data[column_duration])
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_duration], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_duration])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')

plt.figure(figsize=(6, 6))
plt.plot(data[column_duration]/3600) #number of hours
plt.title(f'Graph of {column_duration} in hours')
plt.xlabel('Day')
plt.ylabel('Hours') #maximum of 24 hours/day

#awake: Total amount of awake time registered during the sleep period.
column_awake = 'awake'
plt.figure(figsize=(12, 12))
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_awake], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_awake])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')

plt.figure(figsize=(12, 12))
plt.plot(data[column_awake]/3600) #number of hours
plt.title(f'Graph of {column_awake} in hours')
plt.xlabel('Day')
plt.ylabel('Hours') #maximum of 24 hours/day

#light: Total amount of light (N1 or N2) sleep registered during the sleep period.
column_light = 'light'
plt.figure(figsize=(12, 12))
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_light], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_light])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')


plt.figure(figsize=(12, 12))
plt.plot(data[column_light]/3600) #number of hours
plt.title(f'Graph of {column_light} in hours')
plt.xlabel('Day')
plt.ylabel('Hours') #maximum of 24 hours/day

import numpy as np
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
#rem: Represents REM sleep time's (see sleep.rem) contribution for sleep quality.
x_col = 'summary_date'
print(data[x_col])
column_rem = 'rem'
plt.figure(figsize=(12, 12))
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_rem], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_rem])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')


plt.title(f'Graph of {column_rem} in seconds')
plt.xlabel('Day')
plt.ylabel('Seconds') #maximum of 86400 seconds/day
plt.figure(figsize=(6, 6))
plt.plot(data[column_rem]/3600) #number of hours
plt.title(f'Graph of {column_rem} in hours')
plt.xlabel('Day')
plt.ylabel('Hours') #maximum of 24 hours/day

#score_alignment: Represents circadian alignment's contribution for sleep score.
import numpy as np
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
#rem: Represents REM sleep time's (see sleep.rem) contribution for sleep quality.
x_col = 'summary_date'
column_align = 'score_alignment'
plt.figure(figsize=(12, 12))
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_align], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_align])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')

#patient_1_sleep_periods.csv
import csv
import pandas as pd
import matplotlib.pyplot as plt

patient_1_sleep_periods = 'patient_1_sleep_periods.csv'
data = pd.read_csv(patient_1_sleep_periods)

#average_breath: Unit: breaths per minute; Average respiratory rate
x_col = 'day'
column_breath = 'average_breath'
plt.figure(figsize=(6, 6))
plt.scatter(data[x_col], data[column_breath])
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_breath], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_breath])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')
plt.title(f'Graph of {column_breath}')
plt.xlabel('Breath')
plt.ylabel('Minute') #maximum of 24 hours/day

#average_heart_rate:Unit: beats per minute; The average heart rate registered during the sleep period.
x_col = 'day'
column_hr = 'average_heart_rate'
plt.figure(figsize=(6, 6))
plt.scatter(data[x_col], data[column_hr])
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_hr], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_hr])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')
plt.title(f'Graph of {column_hr}')
plt.xlabel('Breath')
plt.ylabel('Minute') #maximum of 24 hours/day

#total_sleep_duration: Total duration of the sleep period (sleep.duration = sleep.bedtime_end - sleep.bedtime_start).
x_col = 'day'
column_dur = 'total_sleep_duration'
plt.figure(figsize=(12, 12))
plt.scatter(data[x_col], data[column_dur])
label_encoder = LabelEncoder()
data['encoded_x'] = label_encoder.fit_transform(data[x_col])
plt.scatter(data['encoded_x'], data[column_dur], label='Data points')
regression = LinearRegression()
# Fit the regression model
regression.fit(data[['encoded_x']], data[column_dur])
# Calculate predictions using the fitted model
predictions = regression.predict(data[['encoded_x']])
# Plot the line of best fit
plt.plot(data['encoded_x'], predictions, color='red', label='Line of best fit')

#patient_1_readiness.csv
patient_1_readiness = 'patient_1_readiness.csv'
data = pd.read_csv(patient_1_readiness)

#score_temperature:
column_temp = 'score_temperature'
plt.figure(figsize=(12, 12))
plt.plot(data[column_temp])
plt.title(f'Time vs Graph of {column_temp}')
plt.xlabel('Day')
plt.ylabel('Tempature Score')